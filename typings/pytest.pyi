from typing import Any, Callable, List, Optional, Union

def fixture(*args, **kwargs) -> Callable:
    """Decorator to mark a function as a fixture."""
    ...

def mark(*args, **kwargs) -> Any:
    """Marker decorator."""
    ...

def raises(*args, **kwargs) -> Any:
    """Context manager for expected exceptions."""
    ...

def param(*args, **kwargs) -> Any:
    """Pytest parameter."""
    ...

def parametrize(*args, **kwargs) -> Callable:
    """Parametrize a test function."""
    ...

def approx(*args, **kwargs) -> Any:
    """Approximate equality assertion."""
    ...

def skip(*args, **kwargs) -> Any:
    """Skip a test."""
    ...

def xfail(*args, **kwargs) -> Any:
    """Mark a test as expected to fail."""
    ...

class MonkeyPatch:
    def setattr(self, *args, **kwargs) -> None: ...
    def delattr(self, *args, **kwargs) -> None: ...
    def setenv(self, *args, **kwargs) -> None: ...
    def delenv(self, *args, **kwargs) -> None: ...
    def setitem(self, *args, **kwargs) -> None: ...
    def delitem(self, *args, **kwargs) -> None: ...
    def syspath_prepend(self, *args, **kwargs) -> None: ...
    def undo(self) -> None: ... 